<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0/EN" 
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="team.projectA.mapper.ManagerMapper">
	<select id="lodgingCategory" resultType="LodgingVO">
		SELECT lodgingname
			,lidx
			,limagename
			FROM lodgingtb
	</select>
	
	<select id="lodgingID" parameterType="int" resultType="RoomVO">
		SELECT ridx
			 , rtype
			 , rnum
			 , rprice
			 , rimage1
			 , rimage2
			 , rimage3
			 , rimage4
			 , rimage5
		 FROM roomtb
		WHERE lidx = #{lidx}
	</select>
	<!-- 숙소 요청 목록  -->
	<select id="requestList" resultType="lodgingVO">
		SELECT u.userid
			 , u.username
			 , u.uidx
			 , l.lidx
			 , l.limagename
			 , l.lodgingname
			 , l.lodgingkind
			 , l.lodgingaddr
		  FROM lodgingtb l, ausertb u
		 WHERE l.uidx = u.uidx
		   AND lodging = 'Waiting'
	</select>
	<!-- 숙소 승인  -->
	<update id="approval" parameterType="int">
		UPDATE ausertb
		   SET lodging = 'Y'
		 WHERE uidx = #{uidx}
	</update>
	<!-- 숙소 승인거부 -->
	<delete id="requestDel" parameterType="int">
		DELETE 
		  FROM lodgingtb
		 WHERE lidx = #{lidx}
	</delete>
	<update id="requestN" parameterType="int">
		UPDATE ausertb
		   SET lodging = 'N'
		 WHERE uidx = #{uidx}
	</update>
	<!-- 예약 리스트 +페이징 -->
		<select id="reservlist" parameterType="SearchCriteria" resultType="ReservVO">
		SELECT * FROM (SELECT a.USERNAME,a.USERID, l.lodgingname, v.RESERV_DATE, v.RESERV_NUM
			,ROW_NUMBER() OVER(ORDER BY a.username desc) AS qnum
			FROM ausertb a, lodgingtb l, reservtb v, roomtb r
			WHERE a.uidx= v.UIDX
			AND v.ridx = r.ridx
			AND r.lidx = l.lidx)AS mm
			WHERE qnum BETWEEN #{rowStart} and #{rowEnd}
			ORDER BY username desc
					
		</select>
			<!--예약리스트  총 개수-->
	<select id="reservcount" resultType="int">
		SELECT count(reserv_idx)
		FROM reservtb
		<![CDATA[
		WHERE reserv_idx > 0
		]]>
	</select>
		<!-- 문의 리스트 -->
		<select id="managerqnalist" resultType="qnaVO">
			SELECT a.username
					, q.qna_idx
					, q.qna_Qtitle
					, q.qna_Qdate 
					, q.qna_Acheck
					, q.qna_Acontent
				FROM ausertb a, QNATB q
				WHERE a.uidx = q.uidx
		</select>
		<!-- 문의 답변 -->
		<update id="qnaReply" parameterType="HashMap">
			UPDATE qnatb
				SET qna_Acontent = #{qna_Acontent}
					,qna_acheck = '답변완료'
				WHERE  qna_idx = #{qna_idx}
		</update>
		<!-- 회원리스트 -->
		<select id="userlistCount" resultType="int">
			SELECT count(uidx)
				FROM ausertb
		        WHERE uidx > 0 <!--총게시글 수 구한후 refid로 검색어 조건-->
		</select>
		<!--관리자회원 리스트+페이징+검색-->
	<select id="muserList" parameterType="HashMap" resultType="userVO">	
			SELECT uidx
					, userID
					, userName
					, userPhone
					, userEmail
					, userType
				FROM (
					SELECT uidx
							, userID
							, userName
							, userPhone
							, userEmail
							, userType
							, row_number() over(ORDER BY uidx DESC)
							 AS unum
					FROM ausertb
					)AS mm
					WHERE unum BETWEEN #{rowStart} AND #{rowEnd}
					
					ORDER BY uidx DESC
	</select>
	<!-- 리뷰리스트 + 페이징 -->
	<select id="ReviewList" parameterType="SearchCriteria" resultType="ReviewVO">
	SELECT u.userName, qe.rvidx, qe.rvTitle, u.userID, qe.rvdate FROM ausertb u
	LEFT OUTER JOIN   
	(SELECT u.userName, u.uidx, r.rvidx, r.rvTitle, u.userID, r.rvdate,
		ROW_NUMBER() OVER(ORDER BY r.rvidx desc)AS rnum
	FROM ausertb u
	RIGHT OUTER JOIN reviewtb r
	on u.uidx = r.uidx
	WHERE u.uidx = r.uidx)qe
	ON u.uidx = qe.uidx
				
				WHERE rNum BETWEEN #{rowStart} AND #{rowEnd}
				ORDER BY qe.rvidx DESC
		</select>
		<!--리뷰 페이지 총 개수-->
	<select id="reviewcount" resultType="int">
		SELECT count(rvidx)
		FROM reviewtb
		

	</select>
	 

	<sql id="search">
 <if test="searchType != null">
  <if test="searchType == 't'.toString()">where title like '%' || #{keyword} || '%'</if>
  <if test="searchType == 'w'.toString()">where writer like '%' || #{keyword} || '%'</if>
 </if>
</sql>

	<!--리뷰 삭제  -->
   <delete id="reviewDelete" parameterType="int">
			DELETE FROM REVIEWTB 
			WHERE rvidx = #{rvidx}
   </delete>
   <select id="reviewOne" parameterType="int" resultType="ReviewVO">
   			SELECT rvidx
   				   ,rvTitle
   				   ,rvContent
   				   ,rvDate
   				FROM REVIEWTB
   				WHERE rvidx = #{rvidx}
   </select>
   
   <!--문의내역 페이징 -->
	<select id="qnaList" parameterType="SearchCriteria" resultType="qnaVO">	
		 SELECT a.userName, qe.qna_idx, qe.qna_Qtitle, qe.qna_Acheck, qe.qna_Qdate FROM ausertb a
   LEFT OUTER JOIN
     (SELECT a.userName, a.uidx, q.qna_idx, q.qna_Qtitle, q.qna_Acheck, q.qna_Qdate, 
								ROW_NUMBER() OVER(ORDER BY q.qna_idx desc) AS qnum
        FROM ausertb a 
        RIGHT OUTER JOIN qnatb q 
        on a.uidx = q.uidx
        WHERE a.uidx = q.uidx )qe
        ON a.uidx = qe.uidx
				WHERE qNum BETWEEN #{rowStart} AND #{rowEnd}
				ORDER BY qe.qna_idx DESC
	</select>
	<!--문의 페이지 총 개수-->
	<select id="qnacount" resultType="int">
		SELECT count(qna_idx)
		FROM qnatb
		<![CDATA[
		WHERE qna_idx > 0
		]]>
	</select>
	<!-- 숙소리스트 + 페이징-->
	<select id="managerRoomList" parameterType="SearchCriteria" resultType="LodgingVO">
	SELECT lidx
					, limagename
					, lodgingname
					, lodgingaddr
					, lodgingkind
				FROM (
					SELECT lidx
							, limagename
							, lodgingname
							, lodgingaddr
							, lodgingkind
							, row_number() over(ORDER BY lidx DESC)
							 AS lnum
					FROM lodgingtb
					)AS mm
					WHERE lnum BETWEEN #{rowStart} AND #{rowEnd}
					
					ORDER BY lidx DESC
	</select>
	<!--숙소 페이지 총 개수-->
	<select id="RoomListcount" resultType="int">
		SELECT count(lidx)
		FROM lodgingtb
		<![CDATA[
		WHERE lidx > 0
		]]>
	</select>
	
	
	
	<!-- 페스티발 페이지 리스트 출력 -->
	<select id="festivalList" resultType="festivalVO" parameterType="searchCriteria">
		SELECT * 
			FROM (SELECT ftidx
				, ftAddr
				, ftName
				,ftRegDate
				, ROW_NUMBER() OVER(ORDER BY ftidx DESC)AS rNum 
					FROM festivaltb) 
				WHERE rNum BETWEEN #{rowStart} AND #{rowEnd}
				ORDER BY ftidx DESC
	</select>
	<!-- 페스티발 페이지 리스트 개수 -->
	<select id="festivalCnt" resultType="int">
		SELECT count(ftidx)
			FROM festivaltb
				<![CDATA[WHERE ftidx > 0]]>
	</select>
	<!-- 페스티발 등록 -->
	<insert id="festivalPlus" parameterType="HashMap">
		INSERT INTO festivaltb 
			VALUES(
			FTIDX_SEQ.NEXTVAL
			,#{ftAddr}
			,#{ftName}
			,#{ftSubContent}
			,#{ftMainContent}
			,#{ftLink}
			,#{ftLatitude}
			,#{ftLongitude}
			,#{ftImgName}
			,'N'
			,SYSDATE
			,SYSDATE
			)
	</insert>
	<!-- 페스티발 삭제 -->
	<delete id="festivalDt" parameterType="int">
		DELETE FROM festivaltb 
			WHERE ftidx = #{ftidx}
	</delete>
	<!-- 페스티발 상세 페이지 -->
	<select id="festivalInfo" parameterType="int" resultType="festivalVO">
		SELECT * FROM festivaltb 
			WHERE ftidx = #{ftidx}
	</select>
	<!-- 페스티발 상세 페이지 -->
	<select id="festivalMf" parameterType="int" resultType="festivalVO">
		SELECT * FROM festivaltb 
			WHERE ftidx = #{ftidx}
	</select>
	<!-- 페스티발 수정 -->
	<update id="festivalUt" parameterType="festivalVO">
		UPDATE festivaltb 
			SET ftAddr = #{ftAddr}
			, ftName = #{ftName}
			, ftSubContent = #{ftSubContent}
			, ftMainContent = #{ftMainContent}
			, ftLink = #{ftLink}
			, ftLatitude = #{ftLatitude}
			, ftLongitude = #{ftLongitude}
			, ftImgName = #{ftImgName}
			WHERE ftidx = #{ftidx}
	</update>
	<!-- 페스티발 메인 등록 페이지 (등록 안된 리스트)-->
	<select id="festivalNotRegList" resultType="festivalVO">
	SELECT ftidx,ftAddr,ftName 
		FROM festivaltb 
		WHERE FTREGISTRATION = 'N'
	</select>
	<!-- 페스티발 메인 등록 페이지 (등록된 리스트)-->
	<select id="festivalRegList" resultType="festivalVO">
	SELECT ftidx,ftAddr,ftName 
		FROM festivaltb 
		WHERE FTREGISTRATION = 'Y' ORDER BY ftUpdate ASC
	</select>
	<!-- 페스티발 메인 등록 -->
	<update id="festivalReg" parameterType="int">
		UPDATE festivaltb 
			SET ftregistration = 'Y'
				, ftUpdate = SYSDATE 
			WHERE  ftidx = #{ftidx}
	</update>
	<!-- 페스티발 메인 삭제 -->
	<update id="festivalRegDt" parameterType="int">
		UPDATE festivaltb 
			SET ftregistration = 'N' 
			WHERE  ftidx = #{ftidx}
	</update>
	
	
	
	<!-- 여행지 페이지 리스트 출력 -->
	<select id="tripList" resultType="tripVO" parameterType="searchCriteria">
		SELECT * 
			FROM (SELECT tidx
				, tAddr
				, tName
				,tRegDate
				, ROW_NUMBER() OVER(ORDER BY tidx DESC)AS rNum 
					FROM triptb) 
				WHERE rNum BETWEEN #{rowStart} AND #{rowEnd}
				ORDER BY tidx DESC
	</select>
	<!-- 여행지 페이지 리스트 개수 -->
	<select id="tripCnt" resultType="int">
		SELECT count(tidx)
			FROM triptb
				<![CDATA[WHERE tidx > 0]]>
	</select>
	<!-- 여행지 등록 -->
	<insert id="tripPlus" parameterType="HashMap">
		INSERT INTO triptb 
			VALUES(
			TIDX_SEQ.NEXTVAL
			,#{tAddr}
			,#{tName}
			,#{tSubContent}
			,#{tMainContent}
			,#{tLink}
			,#{tLatitude}
			,#{tLongitude}
			,#{tImgName}
			,'N'
			,SYSDATE
			,SYSDATE
			)
	</insert>
	<!-- 여행지 삭제 -->
	<delete id="tripDt" parameterType="int">
		DELETE FROM triptb 
			WHERE tidx = #{tidx}
	</delete>
	<!-- 여행지 상세 페이지 -->
	<select id="tripInfo" parameterType="int" resultType="tripVO">
		SELECT * FROM triptb 
			WHERE tidx = #{tidx}
	</select>
	<!-- 여행지 수정 -->
	<update id="tripUt" parameterType="tripVO">
		UPDATE triptb 
			SET tAddr = #{tAddr}
			, tName = #{tName}
			, tSubContent = #{tSubContent}
			, tMainContent = #{tMainContent}
			, tLink = #{tLink}
			, tLatitude = #{tLatitude}
			, tLongitude = #{tLongitude}
			, tImgName = #{tImgName}
			WHERE tidx = #{tidx}
	</update>
	<!-- 여행지 메인 등록 페이지 (등록 안된 리스트)-->
	<select id="tripNotRegList" resultType="tripVO">
	SELECT tidx,tAddr,tName 
		FROM triptb 
		WHERE TREGISTRATION = 'N'
	</select>
	<!-- 여행지 메인 등록 페이지 (등록된 리스트)-->
	<select id="tripRegList" resultType="tripVO">
	SELECT tidx,tAddr,tName 
		FROM triptb 
		WHERE TREGISTRATION = 'Y' ORDER BY tUpdate ASC
	</select>
	<!-- 여행지 메인 등록 -->
	<update id="tripReg" parameterType="int">
		UPDATE triptb 
			SET tregistration = 'Y' 
				,tUpdate = SYSDATE
			WHERE  tidx = #{tidx}
	</update>
	<!-- 여행지 메인 삭제 -->
	<update id="tripRegDt" parameterType="int">
		UPDATE triptb 
			SET tregistration = 'N' 
			WHERE  tidx = #{tidx}
	</update>
</mapper>




















